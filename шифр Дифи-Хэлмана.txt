import random

def power(base, exponent, modulus):
    result = 1
    while exponent > 0:
        if exponent % 2 == 1:
            result = (result * base) % modulus
        exponent //= 2
        base = (base * base) % modulus
    return result

def generate_key(prime):
    primitive_root = None
    for i in range(2, prime):
        is_primitive_root = True
        for j in range(1, prime - 1):
            if power(i, j, prime) == 1:
                is_primitive_root = False
                break
        if is_primitive_root:
            primitive_root = i
            break
    if primitive_root is None:
        raise Exception("Невозможно сгенерировать")
    private_key = random.randint(2, prime - 1)
    public_key = power(primitive_root, private_key, prime)
    return primitive_root, private_key, public_key

def generate_secret(prime, primitive_root, private_key, public_key):
    shared_secret = power(public_key, private_key, prime)
    return shared_secret

prime = 23
primitive_root, private_key1, public_key1 = generate_key(prime)
primitive_root, private_key2, public_key2 = generate_key(prime)
shared_secret1 = generate_secret(prime, primitive_root, private_key1, public_key2)
shared_secret2 = generate_secret(prime, primitive_root, private_key2, public_key1)
assert shared_secret1 == shared_secret2
print(public_key1)
print(public_key2)
print(shared_secret1)